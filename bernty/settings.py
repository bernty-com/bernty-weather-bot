# -*- coding: utf-8 -*-
"""
Django settings for bernty project.

Generated by 'django-admin startproject' using Django 1.11.11.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os
import environ # pip install django-environ

# /Users/KKA/Dropbox/Site/2018.bernty.ru
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
ROOT_DIR = environ.Path(__file__) - 3 # three folder back (/a/b/c/ - 3 = /)
APPS_DIR = ROOT_DIR.path('public_html')


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATIC_URL = '/staticfiles/'

# Extra places for collectstatic to find static files.
STATICFILES_DIRS = (
    os.path.join(BASE_DIR, 'static'),
)

MEDIA_ROOT = '/home/b/berntyru/public_html/media'

environ.Env.read_env() # reading .env file

#env = environ.Env(
#    SECRET_KEY=str,
#    DEBUG=(bool, False),
#    ALLOWED_HOSTS=(list, ['127.0.0.1:8000']),
#    DATABASE_URL=str,
#)

env = environ.Env(DEBUG=(bool, False),) # set default values and casting
DEBUG = env('DEBUG') # False if not in os.environ

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: locally var stored in ~/.bash_profile
SECRET_KEY = env('SECRET_KEY') # Raises ImproperlyConfigured exception if SECRET_KEY not in os.environ
#os.environ.get('SECRET_KEY','wft317e_vktxe+s-s!t+@_=)f%f$utmr)9dquocaht#^6(-x^d')


# SECURITY WARNING: don't run with debug turned on in production!
#DEBUG = bool(os.environ.get('DJANGO_DEBUG', True) )
ALLOWED_HOSTS = ['bernty.ru','localhost','127.0.0.1']
ADMINS= [('John', 'leonard.schmidt.com@gmail.com')]

# Telegram Bot setting
TELEGRAM_BOT_HANDLERS_CONF = "berntybot.bot_handlers"
TELEGRAM_BOT_TOKEN_EXPIRATION = "2" # tow hours before a token expires
SITE_ID=1 # bernty.ru

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '%(levelname)s %(asctime)s %(module)s %(process)d %(thread)d %(message)s'
        },
        'simple': {
            'format': '%(levelname)s %(message)s'
        },
    },
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse'
        }
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose'
        },
    },     
    'loggers': {
        'telegrambot.views': {
            'handlers': ['console'],
            'propagate': False,
            'level': 'DEBUG',
        },
    }   
}


# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'bootstrap3', # design
    'accounts.apps.AccountsConfig',
    'weather', # my current app
    'telegrambot',
    'rest_framework',
    'berntybot',

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]
CSRF_COOKIE_SECURE = True

ROOT_URLCONF = 'bernty.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'bernty.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

#POSTGRES

DATABASES = {
    'default': env.db('DATABASE_URL') # Raises ImproperlyConfigured exception if DATABASE_URL not in os.environ
#    'extra': env.db('SQLITE_URL', default='sqlite:////tmp/my-tmp-sqlite.db')
}

#DATABASES = {
#    "local": {
#        "ENGINE": "django.db.backends.postgresql_psycopg2",
#        "NAME": "KKA",
#        "USER": "KKA",
#        "PASSWORD": "",
#        "HOST": "localhost",
#        "PORT": "",
#        },
#    "default": {
#        "ENGINE": "django.db.backends.postgresql_psycopg2",
#        "NAME": "berntyru",
#        "USER": "berntyru",
#        "PASSWORD": "WUbuAT2xHd",
#        "HOST": "pg.sweb.ru",
#        "PORT": "5432",
#        "OPTIONS": {
#            "client_encoding": "UTF8"
#        },
#    }
#}

import dj_database_url
db_from_env = dj_database_url.config(conn_max_age=500, ssl_require=True)
DATABASES['default'].update(db_from_env)


# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',},
]

#LOGIN_URL = '/login/'
LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'

# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'ru-ru'
TIME_ZONE = 'Europe/Moscow'
USE_I18N = True
USE_L10N = True
USE_TZ = True


